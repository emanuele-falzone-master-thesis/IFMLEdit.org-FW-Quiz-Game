/*jslint node: true, nomen: true */
"use strict";

var Promise = require('bluebird');

function Action() { // add "options" parameters if needed
    // TODO: Global Initialization
    /*
    example:
    this.collection = options.repositories.mail;
    */
}
Action.prototype.run = function (parameters, solve) { // add "onCancel" parameters if needed
    // Parameters:
<% for (var i = 0; i < parameters.length; i += 1) { -%>
    // parameters['<%= parameters[i]%>']
<% } -%>

    // TODO: Execution
    /*
    example:
    mail.find({subject: 'Re: ' + data.subject})
        .then(solve);
    */
    // THIS CAN BE REMOVED (BEGIN)
    Materialize.toast('<%= name%>', 2000)
    solve({
<% if (events.length) { -%>
        event: '<%= events[0].id%>', // <%= events[0].name%>
<% } -%>
<% for (var i = 1; i < events.length; i += 1) { -%>
        // event: '<%= events[i].id%>', // <%= events[i].name%>
<% } -%>
        data: {
<% for (var i = 0; i < results.length; i += 1) {
       if (parameters.indexOf(results[i]) === -1) { -%>
            '<%= results[i]%>': '0',
<%     } else { -%>
            '<%= results[i]%>': parameters['<%= results[i]%>'],
<%     }
   } -%>
        }
    });
    // THIS CAN BE REMOVED (END)
};

exports.createAction = function (options) {
    var action = new Action(options);
    return function (data) {
        return new Promise(function (solve, reject, onCancel) {
            var parameters = (data && data.filters) || {};
            action.run(parameters, solve, onCancel);
        });
    };
};
